package com.capgemini.capstore.dao;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.PersistenceUnit;

import org.springframework.stereotype.Repository;

import com.capgemini.capstore.bean.ProductBean;

@Repository
public class ProductDAOImpl {

	@PersistenceUnit
	public EntityManagerFactory entityManagerFactory;

	EntityManager entityManager;
	EntityTransaction entityTransaction;

	// Add product
	@Override
	public boolean addProduct(ProductBean productBean){
		boolean addProduct = false;
		try {
			entityManager = entityManagerFactory.createEntityManager();
			entityTransaction = entityManager.getTransaction();
			entityTransaction.begin();
			entityManager.persist(productBean);
			entityTransaction.commit();
			entityManager.close();
			addProduct = true;
		} catch (Exception e) {
			throw new UnableToAddException();
		}
		return addProduct;
	}

	@Override
	public boolean deleteProduct(int productId){
		boolean product = false;
		try {
			entityManager = entityManagerFactory.createEntityManager();
			entityTransaction = entityManager.getTransaction();
			entityTransaction.begin();
			ProductBean hotelBean = entityManager.find(ProductBean.class, productId);
			entityManager.remove(hotelBean);
			entityTransaction.commit();
			product = true;
		} catch (Exception e) {
			throw new UnableDeleteException();
		}
		return product;
	}

	@Override
	public boolean updateProduct(ProductBean productBean) {
		entityManager = entityManagerFactory.createEntityManager();
		ProductBean existingProductDetails = entityManager.find(ProductBean.class, productBean.getProductId());
		boolean productUpdated = false;

		if (existingProductDetails != null) {

			String productName = productBean.getProductName();
			if (productName != null) {
				existingProductDetails.setProductName(productName);
			}

			String productPrice = productBean.getProductPrice();
			if (productPrice != null) {
				existingProductDetails.setProductPrice(productPrice);
			}

			String productQuantity = productBean.getProductPrice();
			if (productQuantity != null) {
				existingProductDetails.setProductQuantity(productQuantity);
			}

			String productCategory = productBean.getProductCategory();
			if (productCategory != null) {
				existingProductDetails.setProductCategory(productCategory);
			}
			
			String productImage = productBean.getProductImage();
			if (productImage != null) {
				existingProductDetails.setProductImage(productImage);
			}
			
			double productDiscount = productBean.getProductDiscount();
			if (productDiscount >= 0) {
				existingProductDetails.setProductDiscount(productDiscount);
			}
			
			try {
				entityTransaction = entityManager.getTransaction();
				entityTransaction.begin();
				entityManager.persist(existingProductDetails);
				entityTransaction.commit();
				productUpdated = true;
			} catch (Exception e) {
				throw new UnableToUpdateException();
			}
			entityManager.close();
		}
		return productUpdated;
	}
}
